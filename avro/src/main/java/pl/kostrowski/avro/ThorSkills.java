/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package pl.kostrowski.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class ThorSkills extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -397705119249278446L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ThorSkills\",\"namespace\":\"pl.kostrowski.avro\",\"fields\":[{\"name\":\"skillName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"skillDescription\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"skillDate\",\"type\":{\"type\":\"int\",\"logicalType\":\"date\"}},{\"name\":\"skillCost\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\",\"java-class\":\"java.math.BigDecimal\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();
static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.DateConversion());
  }

  private static final BinaryMessageEncoder<ThorSkills> ENCODER =
      new BinaryMessageEncoder<ThorSkills>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<ThorSkills> DECODER =
      new BinaryMessageDecoder<ThorSkills>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<ThorSkills> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<ThorSkills> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<ThorSkills> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<ThorSkills>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this ThorSkills to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a ThorSkills from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a ThorSkills instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static ThorSkills fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.String skillName;
   private java.lang.String skillDescription;
   private java.time.LocalDate skillDate;
   private java.math.BigDecimal skillCost;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public ThorSkills() {}

  /**
   * All-args constructor.
   * @param skillName The new value for skillName
   * @param skillDescription The new value for skillDescription
   * @param skillDate The new value for skillDate
   * @param skillCost The new value for skillCost
   */
  public ThorSkills(java.lang.String skillName, java.lang.String skillDescription, java.time.LocalDate skillDate, java.math.BigDecimal skillCost) {
    this.skillName = skillName;
    this.skillDescription = skillDescription;
    this.skillDate = skillDate;
    this.skillCost = skillCost;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return skillName;
    case 1: return skillDescription;
    case 2: return skillDate;
    case 3: return skillCost;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
      null,
      null,
      new org.apache.avro.data.TimeConversions.DateConversion(),
      null,
      null
  };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: skillName = value$ != null ? value$.toString() : null; break;
    case 1: skillDescription = value$ != null ? value$.toString() : null; break;
    case 2: skillDate = (java.time.LocalDate)value$; break;
    case 3: skillCost = (java.math.BigDecimal)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'skillName' field.
   * @return The value of the 'skillName' field.
   */
  public java.lang.String getSkillName() {
    return skillName;
  }


  /**
   * Sets the value of the 'skillName' field.
   * @param value the value to set.
   */
  public void setSkillName(java.lang.String value) {
    this.skillName = value;
  }

  /**
   * Gets the value of the 'skillDescription' field.
   * @return The value of the 'skillDescription' field.
   */
  public java.lang.String getSkillDescription() {
    return skillDescription;
  }


  /**
   * Sets the value of the 'skillDescription' field.
   * @param value the value to set.
   */
  public void setSkillDescription(java.lang.String value) {
    this.skillDescription = value;
  }

  /**
   * Gets the value of the 'skillDate' field.
   * @return The value of the 'skillDate' field.
   */
  public java.time.LocalDate getSkillDate() {
    return skillDate;
  }


  /**
   * Sets the value of the 'skillDate' field.
   * @param value the value to set.
   */
  public void setSkillDate(java.time.LocalDate value) {
    this.skillDate = value;
  }

  /**
   * Gets the value of the 'skillCost' field.
   * @return The value of the 'skillCost' field.
   */
  public java.math.BigDecimal getSkillCost() {
    return skillCost;
  }


  /**
   * Sets the value of the 'skillCost' field.
   * @param value the value to set.
   */
  public void setSkillCost(java.math.BigDecimal value) {
    this.skillCost = value;
  }

  /**
   * Creates a new ThorSkills RecordBuilder.
   * @return A new ThorSkills RecordBuilder
   */
  public static pl.kostrowski.avro.ThorSkills.Builder newBuilder() {
    return new pl.kostrowski.avro.ThorSkills.Builder();
  }

  /**
   * Creates a new ThorSkills RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new ThorSkills RecordBuilder
   */
  public static pl.kostrowski.avro.ThorSkills.Builder newBuilder(pl.kostrowski.avro.ThorSkills.Builder other) {
    if (other == null) {
      return new pl.kostrowski.avro.ThorSkills.Builder();
    } else {
      return new pl.kostrowski.avro.ThorSkills.Builder(other);
    }
  }

  /**
   * Creates a new ThorSkills RecordBuilder by copying an existing ThorSkills instance.
   * @param other The existing instance to copy.
   * @return A new ThorSkills RecordBuilder
   */
  public static pl.kostrowski.avro.ThorSkills.Builder newBuilder(pl.kostrowski.avro.ThorSkills other) {
    if (other == null) {
      return new pl.kostrowski.avro.ThorSkills.Builder();
    } else {
      return new pl.kostrowski.avro.ThorSkills.Builder(other);
    }
  }

  /**
   * RecordBuilder for ThorSkills instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ThorSkills>
    implements org.apache.avro.data.RecordBuilder<ThorSkills> {

    private java.lang.String skillName;
    private java.lang.String skillDescription;
    private java.time.LocalDate skillDate;
    private java.math.BigDecimal skillCost;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(pl.kostrowski.avro.ThorSkills.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.skillName)) {
        this.skillName = data().deepCopy(fields()[0].schema(), other.skillName);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.skillDescription)) {
        this.skillDescription = data().deepCopy(fields()[1].schema(), other.skillDescription);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.skillDate)) {
        this.skillDate = data().deepCopy(fields()[2].schema(), other.skillDate);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.skillCost)) {
        this.skillCost = data().deepCopy(fields()[3].schema(), other.skillCost);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
    }

    /**
     * Creates a Builder by copying an existing ThorSkills instance
     * @param other The existing instance to copy.
     */
    private Builder(pl.kostrowski.avro.ThorSkills other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.skillName)) {
        this.skillName = data().deepCopy(fields()[0].schema(), other.skillName);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.skillDescription)) {
        this.skillDescription = data().deepCopy(fields()[1].schema(), other.skillDescription);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.skillDate)) {
        this.skillDate = data().deepCopy(fields()[2].schema(), other.skillDate);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.skillCost)) {
        this.skillCost = data().deepCopy(fields()[3].schema(), other.skillCost);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'skillName' field.
      * @return The value.
      */
    public java.lang.String getSkillName() {
      return skillName;
    }


    /**
      * Sets the value of the 'skillName' field.
      * @param value The value of 'skillName'.
      * @return This builder.
      */
    public pl.kostrowski.avro.ThorSkills.Builder setSkillName(java.lang.String value) {
      validate(fields()[0], value);
      this.skillName = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'skillName' field has been set.
      * @return True if the 'skillName' field has been set, false otherwise.
      */
    public boolean hasSkillName() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'skillName' field.
      * @return This builder.
      */
    public pl.kostrowski.avro.ThorSkills.Builder clearSkillName() {
      skillName = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'skillDescription' field.
      * @return The value.
      */
    public java.lang.String getSkillDescription() {
      return skillDescription;
    }


    /**
      * Sets the value of the 'skillDescription' field.
      * @param value The value of 'skillDescription'.
      * @return This builder.
      */
    public pl.kostrowski.avro.ThorSkills.Builder setSkillDescription(java.lang.String value) {
      validate(fields()[1], value);
      this.skillDescription = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'skillDescription' field has been set.
      * @return True if the 'skillDescription' field has been set, false otherwise.
      */
    public boolean hasSkillDescription() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'skillDescription' field.
      * @return This builder.
      */
    public pl.kostrowski.avro.ThorSkills.Builder clearSkillDescription() {
      skillDescription = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'skillDate' field.
      * @return The value.
      */
    public java.time.LocalDate getSkillDate() {
      return skillDate;
    }


    /**
      * Sets the value of the 'skillDate' field.
      * @param value The value of 'skillDate'.
      * @return This builder.
      */
    public pl.kostrowski.avro.ThorSkills.Builder setSkillDate(java.time.LocalDate value) {
      validate(fields()[2], value);
      this.skillDate = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'skillDate' field has been set.
      * @return True if the 'skillDate' field has been set, false otherwise.
      */
    public boolean hasSkillDate() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'skillDate' field.
      * @return This builder.
      */
    public pl.kostrowski.avro.ThorSkills.Builder clearSkillDate() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'skillCost' field.
      * @return The value.
      */
    public java.math.BigDecimal getSkillCost() {
      return skillCost;
    }


    /**
      * Sets the value of the 'skillCost' field.
      * @param value The value of 'skillCost'.
      * @return This builder.
      */
    public pl.kostrowski.avro.ThorSkills.Builder setSkillCost(java.math.BigDecimal value) {
      validate(fields()[3], value);
      this.skillCost = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'skillCost' field has been set.
      * @return True if the 'skillCost' field has been set, false otherwise.
      */
    public boolean hasSkillCost() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'skillCost' field.
      * @return This builder.
      */
    public pl.kostrowski.avro.ThorSkills.Builder clearSkillCost() {
      skillCost = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public ThorSkills build() {
      try {
        ThorSkills record = new ThorSkills();
        record.skillName = fieldSetFlags()[0] ? this.skillName : (java.lang.String) defaultValue(fields()[0]);
        record.skillDescription = fieldSetFlags()[1] ? this.skillDescription : (java.lang.String) defaultValue(fields()[1]);
        record.skillDate = fieldSetFlags()[2] ? this.skillDate : (java.time.LocalDate) defaultValue(fields()[2]);
        record.skillCost = fieldSetFlags()[3] ? this.skillCost : (java.math.BigDecimal) defaultValue(fields()[3]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<ThorSkills>
    WRITER$ = (org.apache.avro.io.DatumWriter<ThorSkills>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<ThorSkills>
    READER$ = (org.apache.avro.io.DatumReader<ThorSkills>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










